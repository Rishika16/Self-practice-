#Install R part for random forest 

install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)

# Setting the working directory - 
getwd()
"C:/Users/rishika.sharma/Documents/MICA- Term 4/AMMA"
setwd("C:/Users/rishika.sharma/Documents/MICA- Term 4/AMMA") #This working directory is the folder where all the bank data is stored

# reading client datasets
df.client <- read.csv('train-5.csv')
str(df.client)
view(df.client)

View(df.client)
summary(df.client)
head(df.client)
df.client_final <- df.client[c("Survived", "Pclass", "Sex", "Age", "Parch")]
###Missing value imputation
df.client_final$Age[is.na(df.client_final$Age)]= mean(df.client_final$Age[!is.na(df.client_final$Age)])
summary(df.client_final)
df.client_final$Age[is.na(df.client_final$Age)] = mean(df.client_final$Age, na.rm = TRUE)
# split the data into training and test
set.seed(1234) # for reproducibility
df.client_final$rand <- runif(nrow(df.client_final))
df.train <- df.client_final[df.client_final$rand <= 0.7,]
df.test <- df.client_final[df.client_final$rand > 0.7,]
nrow(df.train)
nrow(df.test)

#decision tree
library(rpart)
fit = rpart(Survived ~ Pclass+ Sex + Age + Parch, df.train,method = "class")
summary(fit)
library(rpart.plot)
rpart.plot(fit)

#to get classification tree with min graphic (run both statements together!)
plot_fit=plot(fit,uniform=TRUE,main="Classification")
text(fit,use.n=TRUE,all=TRUE,cex=.8)
Final_plot = fancyRpartPlot(fit,uniform=TRUE,main="Classification")

#Random Forest 
library(randomForest)
rf = randomForest(Survived ~ Pclass+ Sex + Age + Parch, data = df.train,entry= 2, importance = TRUE)
print(rf)
Summary (rf)

#Random Forest
library(randomForest)
rf= randomForest(Survival - Pclass+Sex+Age, data = df.train)
print(rf)
summary(rf)
varImpPlot(rf)

#Confusion matrix and accuracy calculation

df.train$prob = predict(rf,type=c("response"))

df.train$predSurvived = ifelse(df.train$prob>=.5,1,0)
table(df.train$predSurvived,df.train$Survived)'

#Confusion matrix

accuracy_random = (349-146)/ (349-146+93-34)
print(accuracy_random)


#SVM Algorithm
library(e1071)
svm = svm(Survived ~ Pclass+ Sex + Age + Parch, data = df.train,entry= 2, importance = TRUE)
print(svm)

#Confusion matrix and accuracy calculation

df.train$svm_prob = predict(svm,type=c("response"))
df.train$svm_pred = ifelse(df.train$svm_prob>=.5,1,0)
table(df.train$predsurvived, df.train$Survived)
view(df.train)

#Confusion matrix

accuracy_random = (349-146)/ (349-146+93-34)
print(accuracy_random)
